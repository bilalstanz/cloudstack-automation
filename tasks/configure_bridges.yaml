---
- name: Generating a list of peer StorPool clusters
  set_fact:
    peer_clusters: "{{ sp_cluster_params[lab_environment] | dict2items(key_name='name', value_name='details') | rejectattr('name', 'eq', cloudstack_cluster) }}"

- name: Dumping the list of peer StorPool clusters
  debug:
    var: peer_clusters
    verbosity: 2

- name: "Waiting for cluster {{ cloudstack_cluster }} to become ready"
  uri:
    url: "http://{{ sp_cluster_params[lab_environment][cloudstack_cluster]['api_host'] }}:81/ctrl/1.0/ServersListBlocked"
    headers:
      Authorization: "Storpool v1:{{ sp_cluster_params[lab_environment][cloudstack_cluster]['api_token'] }}"
    return_content: true
    body_format: json
  register: wait_for_cluster_request
  until:
    - wait_for_cluster_request.status == 200
    - wait_for_cluster_request.json.data.clusterStatus == "running"
  retries: 36
  delay: 5

- name: Debug cluster state response
  debug:
    var: wait_for_cluster_request
    verbosity: 2

- name: Creating remote locations
  uri:
    url: "http://{{ sp_cluster_params[lab_environment][cloudstack_cluster]['api_host'] }}:81/ctrl/1.0/LocationAdd"
    headers:
      Authorization: "Storpool v1:{{ sp_cluster_params[lab_environment][cloudstack_cluster]['api_token'] }}"
    method: POST
    body_format: json
    body: >-
      {
        "id": "{{ cluster.details["location_id"] }}",
        "name": "{{ cluster.name[:-1] }}"
      }
  loop: "{{ peer_clusters | unique(attribute='details.location_id') | list }}"
  loop_control:
    loop_var: cluster

- name: Creating remote clusters
  uri:
    url: "http://{{ sp_cluster_params[lab_environment][cloudstack_cluster]['api_host'] }}:81/ctrl/1.0/ClusterAdd"
    headers:
      Authorization: "Storpool v1:{{ sp_cluster_params[lab_environment][cloudstack_cluster]['api_token'] }}"
    method: POST
    body_format: json
    body: >-
      {
        "id": "{{ cluster.details["cluster_id"] }}",
        "location": "{{ cluster.name[:-1] }}",
        "name": "{{ cluster.name[-2:] }}"
      }
  loop: "{{ peer_clusters }}"
  loop_control:
    loop_var: cluster

- name: Getting bridge service public key
  set_fact:
    bridge_public_key: "{{ lookup('file', '/usr/lib/storpool/bridge/bridge.key.txt') }}"

- name: Registering remote bridge services
  uri:
    url: "http://{{ sp_cluster_params[lab_environment][cloudstack_cluster]['api_host'] }}:81/ctrl/1.0/RemoteBridgeAdd"
    headers:
      Authorization: "Storpool v1:{{ sp_cluster_params[lab_environment][cloudstack_cluster]['api_token'] }}"
    method: POST
    body_format: json
    body: >-
      {
        "ip": "{{ cluster.details["bridge_host"] }}",
        "remote": "{{ cluster.name[-2:] }}",
        "noCrypto": true,
        "publicKey": "{{ groups[cluster.name + '_block_server_mgmt_bridge'][0]['ansible_facts']['bridge_public_key'] }}"
      }
  loop: "{{ peer_clusters }}"
  loop_control:
    loop_var: cluster
