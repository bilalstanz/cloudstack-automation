SP_CLUSTER_NAME={{ sp_cluster_params[lab_environment][cloudstack_cluster]["cluster_name"] }}
SP_CLUSTER_ID={{ sp_cluster_params[lab_environment][cloudstack_cluster]["location_id"] }}.{{ sp_cluster_params[lab_environment][cloudstack_cluster]["cluster_id"] }}

SP_EXPECTED_NODES={{ groups[cloudstack_cluster + "_block_server_mgmt_bridge"] | length }}

SP_API_HTTP_HOST={{ sp_cluster_params[lab_environment][cloudstack_cluster]["api_host"] }}
SP_AUTH_TOKEN={{ sp_cluster_params[lab_environment][cloudstack_cluster]["api_token"] }}

SP_RAUTH_TOKEN={{ sp_cluster_params[lab_environment][cloudstack_cluster]["rauth_token"] }}

{% for node_name in (groups[cloudstack_cluster]) %}
{% set node = hostvars[node_name] %}
[{{ node.ansible_facts.hostname }}]
SP_OURID={{ loop.index }}
{% for interface in node.ansible_interfaces %}
{% if 'macaddress' in node.ansible_facts[interface]  %}
{% if 'mgmt' in node.storpool_services and node.ansible_facts[interface].macaddress == (node.nic | selectattr('name', 'eq', 'mgmt') | first )['mac'] %}
SP_API_IFACE={{ interface }}
{% elif 'bridge' in node.storpool_services and node.ansible_facts[interface].macaddress == (node.nic | selectattr('name', 'eq', 'bridge') | first )['mac'] %}
SP_BRIDGE_HOST={{ node.ansible_facts[interface].ipv4.address }}
{% elif node.ansible_facts[interface].macaddress == (node.nic | selectattr('name', 'eq', 'sp1') | first )['mac'] %}
SP_IFACE1_CFG=1:{{ node.ansible_facts[interface].device }}:{{ node.ansible_facts[interface].device }}:0:{{ node.ansible_facts[interface].ipv4.address }}:b:x:v
{% elif node.ansible_facts[interface].macaddress == (node.nic | selectattr('name', 'eq', 'sp2') | first )['mac'] %}
SP_IFACE2_CFG=1:{{ node.ansible_facts[interface].device }}:{{ node.ansible_facts[interface].device }}:0:{{ node.ansible_facts[interface].ipv4.address }}:b:x:v
{% endif %}
{% endif %}
{% endfor %}
{% if 'server' not in node.storpool_services %}
SP_NODE_NON_VOTING=1
{% endif %}
{% endfor %}